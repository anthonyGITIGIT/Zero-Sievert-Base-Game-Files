resolution_scale = 1;
radiation_amount_shader = shader_get_uniform(shd_gray, "gray_amount");
global.night_vision = false;
radiation_amount = 0;
shader_radiation_time = shader_get_uniform(shd_radiation, "grain_time");
shader_radiation_intensity = shader_get_uniform(shd_radiation, "grain_intensity");
surface_inventory = -4;
global.surface_nvg = -4;
contrast_amount = -0.25;
brightness_amount = 0.17;
gamma_amount = 1;
grain_amount = 0.2;
canvas1 = surface_create(surface_get_width(application_surface), surface_get_height(application_surface));
canvas2 = surface_create(surface_get_width(application_surface), surface_get_height(application_surface));
canvas_current = canvas1;
canvas_next = canvas2;
var _count_of_data = 3;
u_contrast_r = array_create(_count_of_data, undefined);
u_contrast_g = array_create(_count_of_data, undefined);
u_contrast_b = array_create(_count_of_data, undefined);
u_saturation = array_create(_count_of_data, undefined);
u_brightness = array_create(_count_of_data, undefined);
u_amount_dark = array_create(_count_of_data, undefined);
u_amount_light = array_create(_count_of_data, undefined);
u_threshold_highlight = array_create(_count_of_data, undefined);
u_multiplier_highlight = array_create(_count_of_data, undefined);
u_threshold_lowlight = array_create(_count_of_data, undefined);
u_multiplier_lowlight = array_create(_count_of_data, undefined);
u_chromatic_aberration_distance = array_create(_count_of_data, undefined);
u_chromatic_aberration_amount = array_create(_count_of_data, undefined);

for (var i = 0; i < _count_of_data; i++)
{
    u_contrast_r[i] = new pp_colour(1);
    u_contrast_g[i] = new pp_colour(1);
    u_contrast_b[i] = new pp_colour(1);
    u_saturation[i] = new pp_colour(1);
    u_brightness[i] = new pp_colour(1);
    u_amount_dark[i] = new pp_colour(0);
    u_amount_light[i] = new pp_colour(1);
    u_threshold_highlight[i] = new pp_colour(0.4);
    u_multiplier_highlight[i] = new pp_colour(1);
    u_threshold_lowlight[i] = new pp_colour(0.3);
    u_multiplier_lowlight[i] = new pp_colour(1);
    u_chromatic_aberration_distance[i] = new pp_colour(0);
    u_chromatic_aberration_amount[i] = new pp_colour(1);
}

_colour_changer_to_change = 0;
global.contrast_r = 1;
global.contrast_g = 1;
global.contrast_b = 1;
global.saturation = 1;
global.brightness = 1;
global.amount_dark = 0;
global.amount_light = 1;
global.threshold_highlight = 0.4;
global.multiplier_highlight = 1;
global.threshold_lowlight = 0.3;
global.multiplier_lowlight = 1;
global.chromatic_aberration_distance = 0;
global.chromatic_aberration_amount = 1;
global.pp_increase = 0.02;
